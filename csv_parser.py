{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib inline\n",
    "# import matplotlib.pyplot as plt\n",
    "# import pandas as pd\n",
    "# filename = 'oktoberfestgesamt19852016.csv'\n",
    "# df = pd.read_csv(filename)\n",
    "# print(df.head)\n",
    "# df ## df alone gives a nice table in the console\n",
    "# print(df.dtypes)\n",
    "\n",
    "# df.hist();\n",
    "# df.hist(column='besucher_tag'); ## ; gets rid of text from axesplot\n",
    "# df['besucher_tag'].hist();\n",
    "# plt.show()  # command is blocking, no other command can run while this is running; need to close the window in terminal\n",
    "# print(df.dtypes)\n",
    "################################\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "def display_columns():\n",
    "    print(df.dtypes)\n",
    "\n",
    "def plot_hist():\n",
    "    df.hist()\n",
    "    plt.show()  ## no return here, this functions changes state;\n",
    "################################33 this is mixing script and functions; we like to load the data first, but this works\n",
    "filename = 'oktoberfestgesamt19852016.csv'\n",
    "df = pd.read_csv(filename)\n",
    "display_columns()\n",
    "plot_hist()\n",
    "################################################################################################\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "def read_csv():\n",
    "    filename = 'oktoberfestgesamt19852016.csv'\n",
    "    df = pd.read_csv(filename)\n",
    "    return df\n",
    "\n",
    "def display_columns():\n",
    "    df = pd.read_csv()\n",
    "    print(df.dtypes)\n",
    "\n",
    "def plot_hist():\n",
    "    df = read_csv()\n",
    "    df.hist()\n",
    "    plt.show()  ## no return here, this functions changes state;\n",
    "\n",
    "display_columns()\n",
    "plot_hist()\n",
    "\n",
    "################################################################################################\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "def display_columns(filename):\n",
    "    df = pd.read_csv(filename)\n",
    "    print(df.dtypes)\n",
    "\n",
    "def plot_hist(filename):\n",
    "    df = read_csv(filename)\n",
    "    df.hist()\n",
    "    plt.show()  ## no return here, this functions changes state;\n",
    "\n",
    "    \n",
    "if __name__ == '__main__': ## to use this for other data, to keep the part above general; it's a general purpose library,  to be run as a script\n",
    "    import sys ## gives us control from outside\n",
    "#     print(sys.argv[1])\n",
    "#     filename = 'oktoberfestgesamt19852016.csv' \n",
    "    filename = sys.argv[1] ## general purpose script that works on multiple datasets\n",
    "    display_columns(filename)\n",
    "    plot_hist(filename)\n",
    "    \n",
    "################################################################################################\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "def display_columns(filename):\n",
    "    df = pd.read_csv(filename)\n",
    "    print(df.dtypes)\n",
    "\n",
    "def plot_hist(filename):\n",
    "    df = read_csv(filename)\n",
    "    df.hist()\n",
    "    plt.show()  ## no return here, this functions changes state;\n",
    "\n",
    "    \n",
    "if __name__ == '__main__': ## to use this for other data, to keep the part above general; it's a general purpose library,  to be run as a script\n",
    "    import sys ## gives us control from outside\n",
    "    command = sys.argv[1]\n",
    "    filename = sys.argv[2] ## call in terminal, then write the filename\n",
    "    if command == 'display':\n",
    "        display_columns(filename)\n",
    "    elif command == 'plot':\n",
    "        plot_hist(filename)\n",
    "    else:\n",
    "        raise IOError(\"csv_parser requires 'plot' or 'display' commands\")\n",
    "        \n",
    "################################################################################################\n",
    "#### argv is a list, so if we don't give a command, the error is not what we raised, but that it's out of range\n",
    "#### let's use click\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import click\n",
    "\n",
    "@click.command()\n",
    "@click.argument('filename')\n",
    "def display_columns(filename):\n",
    "    df = pd.read_csv(filename)\n",
    "    print(df.dtypes)\n",
    "\n",
    "@click.command()\n",
    "@click.argument('filename')\n",
    "def plot_hist(filename):\n",
    "    df = read_csv(filename)\n",
    "    df.hist()\n",
    "    plt.show()  ## no return here, this functions changes state;\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "#     display_columns()\n",
    "    plot_hist()\n",
    "    \n",
    "################################################################################################\n",
    "#### argv is a list, so if we don't give a command, the error is not what we raised, but that it's out of range\n",
    "#### let's use click\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import click\n",
    "@click.group()\n",
    "def cli():\n",
    "    \"\"\"Can display and plot csv files.\"\"\"\n",
    "    pass\n",
    "\n",
    "@cli.command()\n",
    "@click.argument('filename')\n",
    "def display(filename):\n",
    "    \"\"\"Displays the column names and their data type.\"\"\"\n",
    "    df = pd.read_csv(filename)\n",
    "    print(df.dtypes)\n",
    "\n",
    "@cli.command()\n",
    "@click.argument('filename')\n",
    "@click.option('--column', default=None, hlep='Name of column to plot. If not used, all columns will be plotted.')\n",
    "def plot(filename, column):\n",
    "    \"\"\"Plots a histogram of a column of the csv file.\"\"\"\n",
    "    df = read_csv(filename)\n",
    "    if column == None:\n",
    "        df.hist()\n",
    "    else:\n",
    "        df[column].hist()\n",
    "        plt.title(column)\n",
    "    plt.show()\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    cli()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
